// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.0
// source: protofiles/todo.proto

package todo

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	TodoService_Created_FullMethodName     = "/todo.TodoService/Created"
	TodoService_FindAll_FullMethodName     = "/todo.TodoService/FindAll"
	TodoService_FindById_FullMethodName    = "/todo.TodoService/FindById"
	TodoService_DeletedById_FullMethodName = "/todo.TodoService/DeletedById"
	TodoService_UpdatedById_FullMethodName = "/todo.TodoService/UpdatedById"
)

// TodoServiceClient is the client API for TodoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TodoServiceClient interface {
	Created(ctx context.Context, opts ...grpc.CallOption) (TodoService_CreatedClient, error)
	FindAll(ctx context.Context, opts ...grpc.CallOption) (TodoService_FindAllClient, error)
	FindById(ctx context.Context, opts ...grpc.CallOption) (TodoService_FindByIdClient, error)
	DeletedById(ctx context.Context, opts ...grpc.CallOption) (TodoService_DeletedByIdClient, error)
	UpdatedById(ctx context.Context, opts ...grpc.CallOption) (TodoService_UpdatedByIdClient, error)
}

type todoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTodoServiceClient(cc grpc.ClientConnInterface) TodoServiceClient {
	return &todoServiceClient{cc}
}

func (c *todoServiceClient) Created(ctx context.Context, opts ...grpc.CallOption) (TodoService_CreatedClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TodoService_ServiceDesc.Streams[0], TodoService_Created_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &todoServiceCreatedClient{ClientStream: stream}
	return x, nil
}

type TodoService_CreatedClient interface {
	Send(*CreatedDTO) error
	CloseAndRecv() (*Response, error)
	grpc.ClientStream
}

type todoServiceCreatedClient struct {
	grpc.ClientStream
}

func (x *todoServiceCreatedClient) Send(m *CreatedDTO) error {
	return x.ClientStream.SendMsg(m)
}

func (x *todoServiceCreatedClient) CloseAndRecv() (*Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *todoServiceClient) FindAll(ctx context.Context, opts ...grpc.CallOption) (TodoService_FindAllClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TodoService_ServiceDesc.Streams[1], TodoService_FindAll_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &todoServiceFindAllClient{ClientStream: stream}
	return x, nil
}

type TodoService_FindAllClient interface {
	Send(*emptypb.Empty) error
	CloseAndRecv() (*Response, error)
	grpc.ClientStream
}

type todoServiceFindAllClient struct {
	grpc.ClientStream
}

func (x *todoServiceFindAllClient) Send(m *emptypb.Empty) error {
	return x.ClientStream.SendMsg(m)
}

func (x *todoServiceFindAllClient) CloseAndRecv() (*Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *todoServiceClient) FindById(ctx context.Context, opts ...grpc.CallOption) (TodoService_FindByIdClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TodoService_ServiceDesc.Streams[2], TodoService_FindById_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &todoServiceFindByIdClient{ClientStream: stream}
	return x, nil
}

type TodoService_FindByIdClient interface {
	Send(*FindByIdDTO) error
	CloseAndRecv() (*Response, error)
	grpc.ClientStream
}

type todoServiceFindByIdClient struct {
	grpc.ClientStream
}

func (x *todoServiceFindByIdClient) Send(m *FindByIdDTO) error {
	return x.ClientStream.SendMsg(m)
}

func (x *todoServiceFindByIdClient) CloseAndRecv() (*Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *todoServiceClient) DeletedById(ctx context.Context, opts ...grpc.CallOption) (TodoService_DeletedByIdClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TodoService_ServiceDesc.Streams[3], TodoService_DeletedById_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &todoServiceDeletedByIdClient{ClientStream: stream}
	return x, nil
}

type TodoService_DeletedByIdClient interface {
	Send(*DeleteByIdDTO) error
	CloseAndRecv() (*Response, error)
	grpc.ClientStream
}

type todoServiceDeletedByIdClient struct {
	grpc.ClientStream
}

func (x *todoServiceDeletedByIdClient) Send(m *DeleteByIdDTO) error {
	return x.ClientStream.SendMsg(m)
}

func (x *todoServiceDeletedByIdClient) CloseAndRecv() (*Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *todoServiceClient) UpdatedById(ctx context.Context, opts ...grpc.CallOption) (TodoService_UpdatedByIdClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TodoService_ServiceDesc.Streams[4], TodoService_UpdatedById_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &todoServiceUpdatedByIdClient{ClientStream: stream}
	return x, nil
}

type TodoService_UpdatedByIdClient interface {
	Send(*UpdatedByIdDTO) error
	CloseAndRecv() (*Response, error)
	grpc.ClientStream
}

type todoServiceUpdatedByIdClient struct {
	grpc.ClientStream
}

func (x *todoServiceUpdatedByIdClient) Send(m *UpdatedByIdDTO) error {
	return x.ClientStream.SendMsg(m)
}

func (x *todoServiceUpdatedByIdClient) CloseAndRecv() (*Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TodoServiceServer is the server API for TodoService service.
// All implementations must embed UnimplementedTodoServiceServer
// for forward compatibility
type TodoServiceServer interface {
	Created(TodoService_CreatedServer) error
	FindAll(TodoService_FindAllServer) error
	FindById(TodoService_FindByIdServer) error
	DeletedById(TodoService_DeletedByIdServer) error
	UpdatedById(TodoService_UpdatedByIdServer) error
	mustEmbedUnimplementedTodoServiceServer()
}

// UnimplementedTodoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTodoServiceServer struct {
}

func (UnimplementedTodoServiceServer) Created(TodoService_CreatedServer) error {
	return status.Errorf(codes.Unimplemented, "method Created not implemented")
}
func (UnimplementedTodoServiceServer) FindAll(TodoService_FindAllServer) error {
	return status.Errorf(codes.Unimplemented, "method FindAll not implemented")
}
func (UnimplementedTodoServiceServer) FindById(TodoService_FindByIdServer) error {
	return status.Errorf(codes.Unimplemented, "method FindById not implemented")
}
func (UnimplementedTodoServiceServer) DeletedById(TodoService_DeletedByIdServer) error {
	return status.Errorf(codes.Unimplemented, "method DeletedById not implemented")
}
func (UnimplementedTodoServiceServer) UpdatedById(TodoService_UpdatedByIdServer) error {
	return status.Errorf(codes.Unimplemented, "method UpdatedById not implemented")
}
func (UnimplementedTodoServiceServer) mustEmbedUnimplementedTodoServiceServer() {}

// UnsafeTodoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TodoServiceServer will
// result in compilation errors.
type UnsafeTodoServiceServer interface {
	mustEmbedUnimplementedTodoServiceServer()
}

func RegisterTodoServiceServer(s grpc.ServiceRegistrar, srv TodoServiceServer) {
	s.RegisterService(&TodoService_ServiceDesc, srv)
}

func _TodoService_Created_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TodoServiceServer).Created(&todoServiceCreatedServer{ServerStream: stream})
}

type TodoService_CreatedServer interface {
	SendAndClose(*Response) error
	Recv() (*CreatedDTO, error)
	grpc.ServerStream
}

type todoServiceCreatedServer struct {
	grpc.ServerStream
}

func (x *todoServiceCreatedServer) SendAndClose(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *todoServiceCreatedServer) Recv() (*CreatedDTO, error) {
	m := new(CreatedDTO)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TodoService_FindAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TodoServiceServer).FindAll(&todoServiceFindAllServer{ServerStream: stream})
}

type TodoService_FindAllServer interface {
	SendAndClose(*Response) error
	Recv() (*emptypb.Empty, error)
	grpc.ServerStream
}

type todoServiceFindAllServer struct {
	grpc.ServerStream
}

func (x *todoServiceFindAllServer) SendAndClose(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *todoServiceFindAllServer) Recv() (*emptypb.Empty, error) {
	m := new(emptypb.Empty)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TodoService_FindById_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TodoServiceServer).FindById(&todoServiceFindByIdServer{ServerStream: stream})
}

type TodoService_FindByIdServer interface {
	SendAndClose(*Response) error
	Recv() (*FindByIdDTO, error)
	grpc.ServerStream
}

type todoServiceFindByIdServer struct {
	grpc.ServerStream
}

func (x *todoServiceFindByIdServer) SendAndClose(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *todoServiceFindByIdServer) Recv() (*FindByIdDTO, error) {
	m := new(FindByIdDTO)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TodoService_DeletedById_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TodoServiceServer).DeletedById(&todoServiceDeletedByIdServer{ServerStream: stream})
}

type TodoService_DeletedByIdServer interface {
	SendAndClose(*Response) error
	Recv() (*DeleteByIdDTO, error)
	grpc.ServerStream
}

type todoServiceDeletedByIdServer struct {
	grpc.ServerStream
}

func (x *todoServiceDeletedByIdServer) SendAndClose(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *todoServiceDeletedByIdServer) Recv() (*DeleteByIdDTO, error) {
	m := new(DeleteByIdDTO)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TodoService_UpdatedById_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TodoServiceServer).UpdatedById(&todoServiceUpdatedByIdServer{ServerStream: stream})
}

type TodoService_UpdatedByIdServer interface {
	SendAndClose(*Response) error
	Recv() (*UpdatedByIdDTO, error)
	grpc.ServerStream
}

type todoServiceUpdatedByIdServer struct {
	grpc.ServerStream
}

func (x *todoServiceUpdatedByIdServer) SendAndClose(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *todoServiceUpdatedByIdServer) Recv() (*UpdatedByIdDTO, error) {
	m := new(UpdatedByIdDTO)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TodoService_ServiceDesc is the grpc.ServiceDesc for TodoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TodoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "todo.TodoService",
	HandlerType: (*TodoServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Created",
			Handler:       _TodoService_Created_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "FindAll",
			Handler:       _TodoService_FindAll_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "FindById",
			Handler:       _TodoService_FindById_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DeletedById",
			Handler:       _TodoService_DeletedById_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "UpdatedById",
			Handler:       _TodoService_UpdatedById_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "protofiles/todo.proto",
}
